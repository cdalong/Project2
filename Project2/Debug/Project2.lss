
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008b4  00800200  00800200  00000728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c70  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ab  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000829  00000000  00000000  0000189b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000915  00000000  00000000  000027cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c2       	rjmp	.+1440   	; 0x622 <__vector_32>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	6f 02       	muls	r22, r31
  e6:	69 02       	muls	r22, r25
  e8:	6f 02       	muls	r22, r31
  ea:	41 02       	muls	r20, r17
  ec:	74 02       	muls	r23, r20
  ee:	9c 02       	muls	r25, r28
  f0:	a8 02       	muls	r26, r24
  f2:	41 02       	muls	r20, r17
  f4:	88 02       	muls	r24, r24
  f6:	41 02       	muls	r20, r17
  f8:	b4 02       	muls	r27, r20

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_clear_bss>:
 10a:	2a e0       	ldi	r18, 0x0A	; 10
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a4 3b       	cpi	r26, 0xB4	; 180
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	b3 d2       	rcall	.+1382   	; 0x682 <main>
 11c:	c9 c2       	rjmp	.+1426   	; 0x6b0 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 120:	0f 92       	push	r0
 122:	1f 92       	push	r1
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	fc b7       	in	r31, 0x3c	; 60
 162:	ff 93       	push	r31
 164:	ff b7       	in	r31, 0x3f	; 63
 166:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 168:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 16a:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 16c:	e0 93 b2 0a 	sts	0x0AB2, r30
        sts  KernelSp+1, r31
 170:	f0 93 b3 0a 	sts	0x0AB3, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 174:	e0 91 b0 0a 	lds	r30, 0x0AB0
        lds  r31, CurrentSp+1
 178:	f0 91 b1 0a 	lds	r31, 0x0AB1
        out  SPL, r30
 17c:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 17e:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 180:	ff 91       	pop	r31
 182:	ff bf       	out	0x3f, r31	; 63
 184:	ff 91       	pop	r31
 186:	fc bf       	out	0x3c, r31	; 60
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	bf 90       	pop	r11
 1b2:	af 90       	pop	r10
 1b4:	9f 90       	pop	r9
 1b6:	8f 90       	pop	r8
 1b8:	7f 90       	pop	r7
 1ba:	6f 90       	pop	r6
 1bc:	5f 90       	pop	r5
 1be:	4f 90       	pop	r4
 1c0:	3f 90       	pop	r3
 1c2:	2f 90       	pop	r2
 1c4:	1f 90       	pop	r1
 1c6:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c8:	18 95       	reti

000001ca <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1ca:	0f 92       	push	r0
 1cc:	1f 92       	push	r1
 1ce:	2f 92       	push	r2
 1d0:	3f 92       	push	r3
 1d2:	4f 92       	push	r4
 1d4:	5f 92       	push	r5
 1d6:	6f 92       	push	r6
 1d8:	7f 92       	push	r7
 1da:	8f 92       	push	r8
 1dc:	9f 92       	push	r9
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	fc b7       	in	r31, 0x3c	; 60
 20c:	ff 93       	push	r31
 20e:	ff b7       	in	r31, 0x3f	; 63
 210:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 212:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 214:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 216:	e0 93 b0 0a 	sts	0x0AB0, r30
        sts  CurrentSp+1, r31
 21a:	f0 93 b1 0a 	sts	0x0AB1, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 21e:	e0 91 b2 0a 	lds	r30, 0x0AB2
        lds  r31, KernelSp+1
 222:	f0 91 b3 0a 	lds	r31, 0x0AB3
        out  SPL, r30
 226:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 228:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 22a:	ff 91       	pop	r31
 22c:	ff bf       	out	0x3f, r31	; 63
 22e:	ff 91       	pop	r31
 230:	fc bf       	out	0x3c, r31	; 60
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	7f 90       	pop	r7
 264:	6f 90       	pop	r6
 266:	5f 90       	pop	r5
 268:	4f 90       	pop	r4
 26a:	3f 90       	pop	r3
 26c:	2f 90       	pop	r2
 26e:	1f 90       	pop	r1
 270:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 272:	08 95       	ret

00000274 <Dispatch>:

	Cp->ticks += t;
	newnode.task = Cp;
	enqueue_sleep(&sleeping_tasks, &newnode);
	Task_Suspend(Cp->p);
}
 274:	24 e1       	ldi	r18, 0x14	; 20
 276:	31 e0       	ldi	r19, 0x01	; 1
 278:	0b c0       	rjmp	.+22     	; 0x290 <Dispatch+0x1c>
 27a:	80 91 04 02 	lds	r24, 0x0204
 27e:	90 91 05 02 	lds	r25, 0x0205
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	87 70       	andi	r24, 0x07	; 7
 286:	99 27       	eor	r25, r25
 288:	90 93 05 02 	sts	0x0205, r25
 28c:	80 93 04 02 	sts	0x0204, r24
 290:	80 91 04 02 	lds	r24, 0x0204
 294:	90 91 05 02 	lds	r25, 0x0205
 298:	82 9f       	mul	r24, r18
 29a:	f0 01       	movw	r30, r0
 29c:	83 9f       	mul	r24, r19
 29e:	f0 0d       	add	r31, r0
 2a0:	92 9f       	mul	r25, r18
 2a2:	f0 0d       	add	r31, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	e2 5f       	subi	r30, 0xF2	; 242
 2a8:	fc 4f       	sbci	r31, 0xFC	; 252
 2aa:	80 81       	ld	r24, Z
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	29 f7       	brne	.-54     	; 0x27a <Dispatch+0x6>
 2b0:	20 91 04 02 	lds	r18, 0x0204
 2b4:	30 91 05 02 	lds	r19, 0x0205
 2b8:	84 e1       	ldi	r24, 0x14	; 20
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	28 9f       	mul	r18, r24
 2be:	f0 01       	movw	r30, r0
 2c0:	29 9f       	mul	r18, r25
 2c2:	f0 0d       	add	r31, r0
 2c4:	38 9f       	mul	r19, r24
 2c6:	f0 0d       	add	r31, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	e6 5f       	subi	r30, 0xF6	; 246
 2cc:	fd 4f       	sbci	r31, 0xFD	; 253
 2ce:	f0 93 ab 0a 	sts	0x0AAB, r31
 2d2:	e0 93 aa 0a 	sts	0x0AAA, r30
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	90 93 b1 0a 	sts	0x0AB1, r25
 2de:	80 93 b0 0a 	sts	0x0AB0, r24
 2e2:	ec 5f       	subi	r30, 0xFC	; 252
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 83       	st	Z, r24
 2ea:	80 91 04 02 	lds	r24, 0x0204
 2ee:	90 91 05 02 	lds	r25, 0x0205
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	99 27       	eor	r25, r25
 2f8:	90 93 05 02 	sts	0x0205, r25
 2fc:	80 93 04 02 	sts	0x0204, r24
 300:	08 95       	ret

00000302 <Task_Terminate>:
 302:	80 91 02 02 	lds	r24, 0x0202
 306:	90 91 03 02 	lds	r25, 0x0203
 30a:	89 2b       	or	r24, r25
 30c:	51 f0       	breq	.+20     	; 0x322 <Task_Terminate+0x20>
 30e:	f8 94       	cli
 310:	e0 91 aa 0a 	lds	r30, 0x0AAA
 314:	f0 91 ab 0a 	lds	r31, 0x0AAB
 318:	e7 5f       	subi	r30, 0xF7	; 247
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	8a e0       	ldi	r24, 0x0A	; 10
 31e:	80 83       	st	Z, r24
 320:	54 cf       	rjmp	.-344    	; 0x1ca <Enter_Kernel>
 322:	08 95       	ret

00000324 <Kernel_Create_Task_At>:
 324:	fc 01       	movw	r30, r24
 326:	32 96       	adiw	r30, 0x02	; 2
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	31 e0       	ldi	r19, 0x01	; 1
 32c:	df 01       	movw	r26, r30
 32e:	a9 01       	movw	r20, r18
 330:	1d 92       	st	X+, r1
 332:	41 50       	subi	r20, 0x01	; 1
 334:	50 40       	sbci	r21, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <Kernel_Create_Task_At+0xc>
 338:	e1 50       	subi	r30, 0x01	; 1
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	21 e8       	ldi	r18, 0x81	; 129
 33e:	31 e0       	ldi	r19, 0x01	; 1
 340:	20 83       	st	Z, r18
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	30 83       	st	Z, r19
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	10 82       	st	Z, r1
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	60 83       	st	Z, r22
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	70 83       	st	Z, r23
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	10 82       	st	Z, r1
 356:	9c 01       	movw	r18, r24
 358:	27 52       	subi	r18, 0x27	; 39
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	dc 01       	movw	r26, r24
 35e:	2d 93       	st	X+, r18
 360:	3c 93       	st	X, r19
 362:	3b 96       	adiw	r30, 0x0b	; 11
 364:	60 83       	st	Z, r22
 366:	71 83       	std	Z+1, r23	; 0x01
 368:	32 96       	adiw	r30, 0x02	; 2
 36a:	10 82       	st	Z, r1
 36c:	35 97       	sbiw	r30, 0x05	; 5
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 83       	st	Z, r24
 372:	08 95       	ret

00000374 <Kernel_Create_Task>:
 374:	bc 01       	movw	r22, r24
 376:	80 91 00 02 	lds	r24, 0x0200
 37a:	90 91 01 02 	lds	r25, 0x0201
 37e:	08 97       	sbiw	r24, 0x08	; 8
 380:	51 f1       	breq	.+84     	; 0x3d6 <Kernel_Create_Task+0x62>
 382:	80 91 0e 03 	lds	r24, 0x030E
 386:	88 23       	and	r24, r24
 388:	79 f0       	breq	.+30     	; 0x3a8 <Kernel_Create_Task+0x34>
 38a:	e2 e2       	ldi	r30, 0x22	; 34
 38c:	f4 e0       	ldi	r31, 0x04	; 4
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	90 81       	ld	r25, Z
 394:	99 23       	and	r25, r25
 396:	51 f0       	breq	.+20     	; 0x3ac <Kernel_Create_Task+0x38>
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	ec 5e       	subi	r30, 0xEC	; 236
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	28 30       	cpi	r18, 0x08	; 8
 3a2:	31 05       	cpc	r19, r1
 3a4:	b1 f7       	brne	.-20     	; 0x392 <Kernel_Create_Task+0x1e>
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Kernel_Create_Task+0x38>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	80 91 00 02 	lds	r24, 0x0200
 3b0:	90 91 01 02 	lds	r25, 0x0201
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 01 02 	sts	0x0201, r25
 3ba:	80 93 00 02 	sts	0x0200, r24
 3be:	44 e1       	ldi	r20, 0x14	; 20
 3c0:	51 e0       	ldi	r21, 0x01	; 1
 3c2:	24 9f       	mul	r18, r20
 3c4:	c0 01       	movw	r24, r0
 3c6:	25 9f       	mul	r18, r21
 3c8:	90 0d       	add	r25, r0
 3ca:	34 9f       	mul	r19, r20
 3cc:	90 0d       	add	r25, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	86 5f       	subi	r24, 0xF6	; 246
 3d2:	9d 4f       	sbci	r25, 0xFD	; 253
 3d4:	a7 cf       	rjmp	.-178    	; 0x324 <Kernel_Create_Task_At>
 3d6:	08 95       	ret

000003d8 <OS_Init>:
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	81 b9       	out	0x01, r24	; 1
 3dc:	80 e8       	ldi	r24, 0x80	; 128
 3de:	84 b9       	out	0x04, r24	; 4
 3e0:	ea e0       	ldi	r30, 0x0A	; 10
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	80 81       	ld	r24, Z
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	80 83       	st	Z, r24
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	81 b9       	out	0x01, r24	; 1
 3ee:	11 98       	cbi	0x02, 1	; 2
 3f0:	10 92 01 02 	sts	0x0201, r1
 3f4:	10 92 00 02 	sts	0x0200, r1
 3f8:	10 92 03 02 	sts	0x0203, r1
 3fc:	10 92 02 02 	sts	0x0202, r1
 400:	10 92 05 02 	sts	0x0205, r1
 404:	10 92 04 02 	sts	0x0204, r1
 408:	ea e0       	ldi	r30, 0x0A	; 10
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	2a ea       	ldi	r18, 0xAA	; 170
 40e:	3a e0       	ldi	r19, 0x0A	; 10
 410:	84 e1       	ldi	r24, 0x14	; 20
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	df 01       	movw	r26, r30
 416:	ac 01       	movw	r20, r24
 418:	1d 92       	st	X+, r1
 41a:	41 50       	subi	r20, 0x01	; 1
 41c:	50 40       	sbci	r21, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <OS_Init+0x40>
 420:	df 01       	movw	r26, r30
 422:	ac 5f       	subi	r26, 0xFC	; 252
 424:	be 4f       	sbci	r27, 0xFE	; 254
 426:	1c 92       	st	X, r1
 428:	ec 5e       	subi	r30, 0xEC	; 236
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	e2 17       	cp	r30, r18
 42e:	f3 07       	cpc	r31, r19
 430:	89 f7       	brne	.-30     	; 0x414 <OS_Init+0x3c>
 432:	08 95       	ret

00000434 <OS_Start>:
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	80 91 02 02 	lds	r24, 0x0202
 444:	90 91 03 02 	lds	r25, 0x0203
 448:	89 2b       	or	r24, r25
 44a:	09 f0       	breq	.+2      	; 0x44e <OS_Start+0x1a>
 44c:	97 c0       	rjmp	.+302    	; 0x57c <OS_Start+0x148>
 44e:	80 91 00 02 	lds	r24, 0x0200
 452:	90 91 01 02 	lds	r25, 0x0201
 456:	89 2b       	or	r24, r25
 458:	09 f4       	brne	.+2      	; 0x45c <OS_Start+0x28>
 45a:	90 c0       	rjmp	.+288    	; 0x57c <OS_Start+0x148>
 45c:	f8 94       	cli
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 03 02 	sts	0x0203, r25
 466:	80 93 02 02 	sts	0x0202, r24
 46a:	04 df       	rcall	.-504    	; 0x274 <Dispatch>
 46c:	11 e0       	ldi	r17, 0x01	; 1
 46e:	0f 2e       	mov	r0, r31
 470:	f5 e0       	ldi	r31, 0x05	; 5
 472:	ff 2e       	mov	r15, r31
 474:	f0 2d       	mov	r31, r0
 476:	03 e0       	ldi	r16, 0x03	; 3
 478:	68 94       	set
 47a:	ee 24       	eor	r14, r14
 47c:	e2 f8       	bld	r14, 2
 47e:	c1 e0       	ldi	r28, 0x01	; 1
 480:	d0 e0       	ldi	r29, 0x00	; 0
 482:	e0 91 aa 0a 	lds	r30, 0x0AAA
 486:	f0 91 ab 0a 	lds	r31, 0x0AAB
 48a:	df 01       	movw	r26, r30
 48c:	a7 5f       	subi	r26, 0xF7	; 247
 48e:	be 4f       	sbci	r27, 0xFE	; 254
 490:	1c 92       	st	X, r1
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	90 93 b1 0a 	sts	0x0AB1, r25
 49a:	80 93 b0 0a 	sts	0x0AB0, r24
 49e:	40 de       	rcall	.-896    	; 0x120 <CSwitch>
 4a0:	a0 91 aa 0a 	lds	r26, 0x0AAA
 4a4:	b0 91 ab 0a 	lds	r27, 0x0AAB
 4a8:	80 91 b0 0a 	lds	r24, 0x0AB0
 4ac:	90 91 b1 0a 	lds	r25, 0x0AB1
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	9c 93       	st	X, r25
 4b4:	8e 93       	st	-X, r24
 4b6:	fd 01       	movw	r30, r26
 4b8:	e7 5f       	subi	r30, 0xF7	; 247
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	40 81       	ld	r20, Z
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	4b 30       	cpi	r20, 0x0B	; 11
 4c2:	51 05       	cpc	r21, r1
 4c4:	f0 f6       	brcc	.-68     	; 0x482 <OS_Start+0x4e>
 4c6:	fa 01       	movw	r30, r20
 4c8:	88 27       	eor	r24, r24
 4ca:	ee 58       	subi	r30, 0x8E	; 142
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	8f 4f       	sbci	r24, 0xFF	; 255
 4d0:	e7 c0       	rjmp	.+462    	; 0x6a0 <__tablejump2__>
 4d2:	a9 5f       	subi	r26, 0xF9	; 249
 4d4:	be 4f       	sbci	r27, 0xFE	; 254
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	4c df       	rcall	.-360    	; 0x374 <Kernel_Create_Task>
 4dc:	d2 cf       	rjmp	.-92     	; 0x482 <OS_Start+0x4e>
 4de:	ac 5f       	subi	r26, 0xFC	; 252
 4e0:	be 4f       	sbci	r27, 0xFE	; 254
 4e2:	1c 93       	st	X, r17
 4e4:	c7 de       	rcall	.-626    	; 0x274 <Dispatch>
 4e6:	cd cf       	rjmp	.-102    	; 0x482 <OS_Start+0x4e>
 4e8:	fd 01       	movw	r30, r26
 4ea:	e0 5f       	subi	r30, 0xF0	; 240
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	d1 83       	std	Z+1, r29	; 0x01
 4f0:	c0 83       	st	Z, r28
 4f2:	3c 97       	sbiw	r30, 0x0c	; 12
 4f4:	80 81       	ld	r24, Z
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	11 f4       	brne	.+4      	; 0x4fe <OS_Start+0xca>
 4fa:	f0 82       	st	Z, r15
 4fc:	c2 cf       	rjmp	.-124    	; 0x482 <OS_Start+0x4e>
 4fe:	fd 01       	movw	r30, r26
 500:	ec 5f       	subi	r30, 0xFC	; 252
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	80 81       	ld	r24, Z
 506:	83 30       	cpi	r24, 0x03	; 3
 508:	09 f0       	breq	.+2      	; 0x50c <OS_Start+0xd8>
 50a:	bb cf       	rjmp	.-138    	; 0x482 <OS_Start+0x4e>
 50c:	e0 82       	st	Z, r14
 50e:	b9 cf       	rjmp	.-142    	; 0x482 <OS_Start+0x4e>
 510:	fd 01       	movw	r30, r26
 512:	e0 5f       	subi	r30, 0xF0	; 240
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	11 82       	std	Z+1, r1	; 0x01
 518:	10 82       	st	Z, r1
 51a:	3c 97       	sbiw	r30, 0x0c	; 12
 51c:	80 81       	ld	r24, Z
 51e:	85 30       	cpi	r24, 0x05	; 5
 520:	11 f4       	brne	.+4      	; 0x526 <OS_Start+0xf2>
 522:	10 83       	st	Z, r17
 524:	ae cf       	rjmp	.-164    	; 0x482 <OS_Start+0x4e>
 526:	fd 01       	movw	r30, r26
 528:	ec 5f       	subi	r30, 0xFC	; 252
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	80 81       	ld	r24, Z
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	09 f0       	breq	.+2      	; 0x534 <OS_Start+0x100>
 532:	a7 cf       	rjmp	.-178    	; 0x482 <OS_Start+0x4e>
 534:	00 83       	st	Z, r16
 536:	a5 cf       	rjmp	.-182    	; 0x482 <OS_Start+0x4e>
 538:	fd 01       	movw	r30, r26
 53a:	ec 5f       	subi	r30, 0xFC	; 252
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	80 81       	ld	r24, Z
 540:	85 30       	cpi	r24, 0x05	; 5
 542:	11 f4       	brne	.+4      	; 0x548 <OS_Start+0x114>
 544:	e0 82       	st	Z, r14
 546:	9d cf       	rjmp	.-198    	; 0x482 <OS_Start+0x4e>
 548:	ac 5f       	subi	r26, 0xFC	; 252
 54a:	be 4f       	sbci	r27, 0xFE	; 254
 54c:	0c 93       	st	X, r16
 54e:	99 cf       	rjmp	.-206    	; 0x482 <OS_Start+0x4e>
 550:	fd 01       	movw	r30, r26
 552:	ec 5f       	subi	r30, 0xFC	; 252
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	80 81       	ld	r24, Z
 558:	84 30       	cpi	r24, 0x04	; 4
 55a:	11 f4       	brne	.+4      	; 0x560 <OS_Start+0x12c>
 55c:	f0 82       	st	Z, r15
 55e:	91 cf       	rjmp	.-222    	; 0x482 <OS_Start+0x4e>
 560:	ac 5f       	subi	r26, 0xFC	; 252
 562:	be 4f       	sbci	r27, 0xFE	; 254
 564:	1c 93       	st	X, r17
 566:	8d cf       	rjmp	.-230    	; 0x482 <OS_Start+0x4e>
 568:	fd 01       	movw	r30, r26
 56a:	ec 5f       	subi	r30, 0xFC	; 252
 56c:	fe 4f       	sbci	r31, 0xFE	; 254
 56e:	10 82       	st	Z, r1
 570:	ae 5f       	subi	r26, 0xFE	; 254
 572:	be 4f       	sbci	r27, 0xFE	; 254
 574:	8d 91       	ld	r24, X+
 576:	9c 91       	ld	r25, X
 578:	7d de       	rcall	.-774    	; 0x274 <Dispatch>
 57a:	83 cf       	rjmp	.-250    	; 0x482 <OS_Start+0x4e>
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	08 95       	ret

0000058a <Task_Create>:
 58a:	20 91 02 02 	lds	r18, 0x0202
 58e:	30 91 03 02 	lds	r19, 0x0203
 592:	23 2b       	or	r18, r19
 594:	79 f0       	breq	.+30     	; 0x5b4 <Task_Create+0x2a>
 596:	f8 94       	cli
 598:	20 91 aa 0a 	lds	r18, 0x0AAA
 59c:	30 91 ab 0a 	lds	r19, 0x0AAB
 5a0:	f9 01       	movw	r30, r18
 5a2:	e7 5f       	subi	r30, 0xF7	; 247
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	40 83       	st	Z, r20
 5aa:	32 97       	sbiw	r30, 0x02	; 2
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	80 83       	st	Z, r24
 5b0:	0c ce       	rjmp	.-1000   	; 0x1ca <Enter_Kernel>
 5b2:	08 95       	ret
 5b4:	df ce       	rjmp	.-578    	; 0x374 <Kernel_Create_Task>
 5b6:	08 95       	ret

000005b8 <Task_Next>:
 5b8:	80 91 02 02 	lds	r24, 0x0202
 5bc:	90 91 03 02 	lds	r25, 0x0203
 5c0:	89 2b       	or	r24, r25
 5c2:	51 f0       	breq	.+20     	; 0x5d8 <Task_Next+0x20>
 5c4:	f8 94       	cli
 5c6:	e0 91 aa 0a 	lds	r30, 0x0AAA
 5ca:	f0 91 ab 0a 	lds	r31, 0x0AAB
 5ce:	e7 5f       	subi	r30, 0xF7	; 247
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
 5d6:	f9 cd       	rjmp	.-1038   	; 0x1ca <Enter_Kernel>
 5d8:	08 95       	ret

000005da <Ping>:
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	cd e7       	ldi	r28, 0x7D	; 125
 5de:	10 98       	cbi	0x02, 0	; 2
 5e0:	2f 98       	cbi	0x05, 7	; 5
 5e2:	8d 2f       	mov	r24, r29
 5e4:	9c 2f       	mov	r25, r28
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <Ping+0xc>
 5ea:	8d 2f       	mov	r24, r29
 5ec:	9c 2f       	mov	r25, r28
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <Ping+0x14>
 5f2:	8d 2f       	mov	r24, r29
 5f4:	9c 2f       	mov	r25, r28
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <Ping+0x1c>
 5fa:	de df       	rcall	.-68     	; 0x5b8 <Task_Next>
 5fc:	f0 cf       	rjmp	.-32     	; 0x5de <Ping+0x4>

000005fe <Pong>:
 5fe:	d0 e0       	ldi	r29, 0x00	; 0
 600:	cd e7       	ldi	r28, 0x7D	; 125
 602:	10 9a       	sbi	0x02, 0	; 2
 604:	2f 9a       	sbi	0x05, 7	; 5
 606:	8d 2f       	mov	r24, r29
 608:	9c 2f       	mov	r25, r28
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <Pong+0xc>
 60e:	8d 2f       	mov	r24, r29
 610:	9c 2f       	mov	r25, r28
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <Pong+0x14>
 616:	8d 2f       	mov	r24, r29
 618:	9c 2f       	mov	r25, r28
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <Pong+0x1c>
 61e:	cc df       	rcall	.-104    	; 0x5b8 <Task_Next>
 620:	f0 cf       	rjmp	.-32     	; 0x602 <Pong+0x4>

00000622 <__vector_32>:

// System timer that interrupts every 10 ms
void TIMER3_COMPA_vect(void){
  int tasksRemain = 1;										// Condition variable
  sleep_node sleeping_task;
  sleeping_task.task = sleeping_tasks.head->task;
 622:	a0 91 06 02 	lds	r26, 0x0206
 626:	b0 91 07 02 	lds	r27, 0x0207
 62a:	2d 91       	ld	r18, X+
 62c:	3c 91       	ld	r19, X
  
  if (sleeping_task.task != NULL){
 62e:	21 15       	cp	r18, r1
 630:	31 05       	cpc	r19, r1
 632:	31 f1       	breq	.+76     	; 0x680 <__vector_32+0x5e>
    while (tasksRemain){						
      sleeping_task.task->ticks -= 1;
 634:	d9 01       	movw	r26, r18
 636:	ae 5f       	subi	r26, 0xFE	; 254
 638:	be 4f       	sbci	r27, 0xFE	; 254
 63a:	8d 91       	ld	r24, X+
 63c:	9c 91       	ld	r25, X
 63e:	11 97       	sbiw	r26, 0x01	; 1
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	8d 93       	st	X+, r24
 644:	9c 93       	st	X, r25
      
      if (sleeping_task.task->ticks == 0){
 646:	89 2b       	or	r24, r25
 648:	41 f4       	brne	.+16     	; 0x65a <__vector_32+0x38>
        Disable_Interrupt();
 64a:	f8 94       	cli
        sleeping_task.task->request = RESUME;
 64c:	f9 01       	movw	r30, r18
 64e:	e7 5f       	subi	r30, 0xF7	; 247
 650:	fe 4f       	sbci	r31, 0xFE	; 254
 652:	88 e0       	ldi	r24, 0x08	; 8
 654:	80 83       	st	Z, r24
        Enter_Kernel();
 656:	b9 cd       	rjmp	.-1166   	; 0x1ca <Enter_Kernel>
        break;
 658:	08 95       	ret
      }
	  
  	  if (sleeping_task.next) {
 65a:	30 97       	sbiw	r30, 0x00	; 0
 65c:	89 f0       	breq	.+34     	; 0x680 <__vector_32+0x5e>
  		 sleeping_task = *sleeping_task.next;
 65e:	20 81       	ld	r18, Z
 660:	31 81       	ldd	r19, Z+1	; 0x01
 662:	02 80       	ldd	r0, Z+2	; 0x02
 664:	f3 81       	ldd	r31, Z+3	; 0x03
 666:	e0 2d       	mov	r30, r0
  sleep_node sleeping_task;
  sleeping_task.task = sleeping_tasks.head->task;
  
  if (sleeping_task.task != NULL){
    while (tasksRemain){						
      sleeping_task.task->ticks -= 1;
 668:	d9 01       	movw	r26, r18
 66a:	ae 5f       	subi	r26, 0xFE	; 254
 66c:	be 4f       	sbci	r27, 0xFE	; 254
 66e:	8d 91       	ld	r24, X+
 670:	9c 91       	ld	r25, X
 672:	11 97       	sbiw	r26, 0x01	; 1
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	8d 93       	st	X+, r24
 678:	9c 93       	st	X, r25
      
      if (sleeping_task.task->ticks == 0){
 67a:	89 2b       	or	r24, r25
 67c:	71 f7       	brne	.-36     	; 0x65a <__vector_32+0x38>
 67e:	e5 cf       	rjmp	.-54     	; 0x64a <__vector_32+0x28>
 680:	08 95       	ret

00000682 <main>:
  * This function creates two cooperative tasks, "Ping" and "Pong". Both
  * will run forever.
  */
void main() 
{
   OS_Init();
 682:	aa de       	rcall	.-684    	; 0x3d8 <OS_Init>
   Task_Create( Ping, 8, 8 );
 684:	48 e0       	ldi	r20, 0x08	; 8
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	68 e0       	ldi	r22, 0x08	; 8
 68a:	8d ee       	ldi	r24, 0xED	; 237
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	7d df       	rcall	.-262    	; 0x58a <Task_Create>
   Task_Create( Pong, 8, 8 );
 690:	48 e0       	ldi	r20, 0x08	; 8
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	68 e0       	ldi	r22, 0x08	; 8
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	92 e0       	ldi	r25, 0x02	; 2
 69a:	77 df       	rcall	.-274    	; 0x58a <Task_Create>
   OS_Start();
 69c:	cb ce       	rjmp	.-618    	; 0x434 <OS_Start>
 69e:	08 95       	ret

000006a0 <__tablejump2__>:
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	88 1f       	adc	r24, r24
 6a6:	8b bf       	out	0x3b, r24	; 59
 6a8:	07 90       	elpm	r0, Z+
 6aa:	f6 91       	elpm	r31, Z
 6ac:	e0 2d       	mov	r30, r0
 6ae:	19 94       	eijmp

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
