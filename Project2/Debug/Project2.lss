
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042c  00800200  00800200  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000618  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061f  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000292  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f7  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 32       	cpi	r26, 0x2C	; 44
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	11 d2       	rcall	.+1058   	; 0x528 <main>
 106:	13 c2       	rjmp	.+1062   	; 0x52e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	fc b7       	in	r31, 0x3c	; 60
 14c:	ff 93       	push	r31
 14e:	ff b7       	in	r31, 0x3f	; 63
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 156:	e0 93 2a 06 	sts	0x062A, r30
        sts  KernelSp+1, r31
 15a:	f0 93 2b 06 	sts	0x062B, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 15e:	e0 91 28 06 	lds	r30, 0x0628
        lds  r31, CurrentSp+1
 162:	f0 91 29 06 	lds	r31, 0x0629
        out  SPL, r30
 166:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 168:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16a:	ff 91       	pop	r31
 16c:	ff bf       	out	0x3f, r31	; 63
 16e:	ff 91       	pop	r31
 170:	fc bf       	out	0x3c, r31	; 60
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	8f 90       	pop	r8
 1a2:	7f 90       	pop	r7
 1a4:	6f 90       	pop	r6
 1a6:	5f 90       	pop	r5
 1a8:	4f 90       	pop	r4
 1aa:	3f 90       	pop	r3
 1ac:	2f 90       	pop	r2
 1ae:	1f 90       	pop	r1
 1b0:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b2:	18 95       	reti

000001b4 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b4:	0f 92       	push	r0
 1b6:	1f 92       	push	r1
 1b8:	2f 92       	push	r2
 1ba:	3f 92       	push	r3
 1bc:	4f 92       	push	r4
 1be:	5f 92       	push	r5
 1c0:	6f 92       	push	r6
 1c2:	7f 92       	push	r7
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	fc b7       	in	r31, 0x3c	; 60
 1f6:	ff 93       	push	r31
 1f8:	ff b7       	in	r31, 0x3f	; 63
 1fa:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 1fc:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 1fe:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 200:	e0 93 28 06 	sts	0x0628, r30
        sts  CurrentSp+1, r31
 204:	f0 93 29 06 	sts	0x0629, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 208:	e0 91 2a 06 	lds	r30, 0x062A
        lds  r31, KernelSp+1
 20c:	f0 91 2b 06 	lds	r31, 0x062B
        out  SPL, r30
 210:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 212:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 214:	ff 91       	pop	r31
 216:	ff bf       	out	0x3f, r31	; 63
 218:	ff 91       	pop	r31
 21a:	fc bf       	out	0x3c, r31	; 60
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	9f 90       	pop	r9
 24a:	8f 90       	pop	r8
 24c:	7f 90       	pop	r7
 24e:	6f 90       	pop	r6
 250:	5f 90       	pop	r5
 252:	4f 90       	pop	r4
 254:	3f 90       	pop	r3
 256:	2f 90       	pop	r2
 258:	1f 90       	pop	r1
 25a:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 25c:	08 95       	ret

0000025e <Dispatch>:
	//enable_LED(LED_D2_GREEN);
	PORTB &= ~(1<< DDB7);
	PORTL &= ~(1<<DDL1);
    for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */
 25e:	28 e0       	ldi	r18, 0x08	; 8
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	0b c0       	rjmp	.+22     	; 0x27a <Dispatch+0x1c>
 264:	80 91 04 02 	lds	r24, 0x0204
 268:	90 91 05 02 	lds	r25, 0x0205
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	83 70       	andi	r24, 0x03	; 3
 270:	99 27       	eor	r25, r25
 272:	90 93 05 02 	sts	0x0205, r25
 276:	80 93 04 02 	sts	0x0204, r24
 27a:	80 91 04 02 	lds	r24, 0x0204
 27e:	90 91 05 02 	lds	r25, 0x0205
 282:	82 9f       	mul	r24, r18
 284:	f0 01       	movw	r30, r0
 286:	83 9f       	mul	r24, r19
 288:	f0 0d       	add	r31, r0
 28a:	92 9f       	mul	r25, r18
 28c:	f0 0d       	add	r31, r0
 28e:	11 24       	eor	r1, r1
 290:	e6 5f       	subi	r30, 0xF6	; 246
 292:	fc 4f       	sbci	r31, 0xFC	; 252
 294:	80 81       	ld	r24, Z
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f7       	brne	.-54     	; 0x264 <Dispatch+0x6>
 29a:	20 91 04 02 	lds	r18, 0x0204
 29e:	30 91 05 02 	lds	r19, 0x0205
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	28 9f       	mul	r18, r24
 2a8:	f0 01       	movw	r30, r0
 2aa:	29 9f       	mul	r18, r25
 2ac:	f0 0d       	add	r31, r0
 2ae:	38 9f       	mul	r19, r24
 2b0:	f0 0d       	add	r31, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	e8 5f       	subi	r30, 0xF8	; 248
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	f0 93 07 02 	sts	0x0207, r31
 2bc:	e0 93 06 02 	sts	0x0206, r30
 2c0:	80 81       	ld	r24, Z
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	90 93 29 06 	sts	0x0629, r25
 2c8:	80 93 28 06 	sts	0x0628, r24
 2cc:	ee 5f       	subi	r30, 0xFE	; 254
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
 2d4:	80 91 04 02 	lds	r24, 0x0204
 2d8:	90 91 05 02 	lds	r25, 0x0205
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	83 70       	andi	r24, 0x03	; 3
 2e0:	99 27       	eor	r25, r25
 2e2:	90 93 05 02 	sts	0x0205, r25
 2e6:	80 93 04 02 	sts	0x0204, r24
 2ea:	08 95       	ret

000002ec <Task_Terminate>:
 2ec:	80 91 02 02 	lds	r24, 0x0202
 2f0:	90 91 03 02 	lds	r25, 0x0203
 2f4:	89 2b       	or	r24, r25
 2f6:	51 f0       	breq	.+20     	; 0x30c <Task_Terminate+0x20>
 2f8:	f8 94       	cli
 2fa:	e0 91 06 02 	lds	r30, 0x0206
 2fe:	f0 91 07 02 	lds	r31, 0x0207
 302:	e9 5f       	subi	r30, 0xF9	; 249
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
 30a:	54 cf       	rjmp	.-344    	; 0x1b4 <Enter_Kernel>
 30c:	08 95       	ret

0000030e <Kernel_Create_Task_At>:
 30e:	fc 01       	movw	r30, r24
 310:	32 96       	adiw	r30, 0x02	; 2
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	31 e0       	ldi	r19, 0x01	; 1
 316:	df 01       	movw	r26, r30
 318:	a9 01       	movw	r20, r18
 31a:	1d 92       	st	X+, r1
 31c:	41 50       	subi	r20, 0x01	; 1
 31e:	50 40       	sbci	r21, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <Kernel_Create_Task_At+0xc>
 322:	e1 50       	subi	r30, 0x01	; 1
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	26 e7       	ldi	r18, 0x76	; 118
 328:	31 e0       	ldi	r19, 0x01	; 1
 32a:	20 83       	st	Z, r18
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	30 83       	st	Z, r19
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	70 83       	st	Z, r23
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	10 82       	st	Z, r1
 33c:	9c 01       	movw	r18, r24
 33e:	26 52       	subi	r18, 0x26	; 38
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	dc 01       	movw	r26, r24
 344:	2d 93       	st	X+, r18
 346:	3c 93       	st	X, r19
 348:	38 96       	adiw	r30, 0x08	; 8
 34a:	60 83       	st	Z, r22
 34c:	71 83       	std	Z+1, r23	; 0x01
 34e:	32 96       	adiw	r30, 0x02	; 2
 350:	10 82       	st	Z, r1
 352:	35 97       	sbiw	r30, 0x05	; 5
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <Kernel_Create_Task>:
 35a:	20 91 00 02 	lds	r18, 0x0200
 35e:	30 91 01 02 	lds	r19, 0x0201
 362:	24 30       	cpi	r18, 0x04	; 4
 364:	31 05       	cpc	r19, r1
 366:	a1 f1       	breq	.+104    	; 0x3d0 <Kernel_Create_Task+0x76>
 368:	20 91 0a 03 	lds	r18, 0x030A
 36c:	22 23       	and	r18, r18
 36e:	a9 f0       	breq	.+42     	; 0x39a <Kernel_Create_Task+0x40>
 370:	20 91 12 04 	lds	r18, 0x0412
 374:	22 23       	and	r18, r18
 376:	59 f0       	breq	.+22     	; 0x38e <Kernel_Create_Task+0x34>
 378:	20 91 1a 05 	lds	r18, 0x051A
 37c:	22 23       	and	r18, r18
 37e:	51 f0       	breq	.+20     	; 0x394 <Kernel_Create_Task+0x3a>
 380:	20 91 22 06 	lds	r18, 0x0622
 384:	21 11       	cpse	r18, r1
 386:	0c c0       	rjmp	.+24     	; 0x3a0 <Kernel_Create_Task+0x46>
 388:	43 e0       	ldi	r20, 0x03	; 3
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <Kernel_Create_Task+0x4a>
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <Kernel_Create_Task+0x4a>
 394:	42 e0       	ldi	r20, 0x02	; 2
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <Kernel_Create_Task+0x4a>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Kernel_Create_Task+0x4a>
 3a0:	44 e0       	ldi	r20, 0x04	; 4
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	bc 01       	movw	r22, r24
 3a6:	80 91 00 02 	lds	r24, 0x0200
 3aa:	90 91 01 02 	lds	r25, 0x0201
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 01 02 	sts	0x0201, r25
 3b4:	80 93 00 02 	sts	0x0200, r24
 3b8:	28 e0       	ldi	r18, 0x08	; 8
 3ba:	31 e0       	ldi	r19, 0x01	; 1
 3bc:	42 9f       	mul	r20, r18
 3be:	c0 01       	movw	r24, r0
 3c0:	43 9f       	mul	r20, r19
 3c2:	90 0d       	add	r25, r0
 3c4:	52 9f       	mul	r21, r18
 3c6:	90 0d       	add	r25, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	88 5f       	subi	r24, 0xF8	; 248
 3cc:	9d 4f       	sbci	r25, 0xFD	; 253
 3ce:	9f cf       	rjmp	.-194    	; 0x30e <Kernel_Create_Task_At>
 3d0:	08 95       	ret

000003d2 <OS_Init>:
 3d2:	10 92 01 02 	sts	0x0201, r1
 3d6:	10 92 00 02 	sts	0x0200, r1
 3da:	10 92 03 02 	sts	0x0203, r1
 3de:	10 92 02 02 	sts	0x0202, r1
 3e2:	10 92 05 02 	sts	0x0205, r1
 3e6:	10 92 04 02 	sts	0x0204, r1
 3ea:	e8 e0       	ldi	r30, 0x08	; 8
 3ec:	f2 e0       	ldi	r31, 0x02	; 2
 3ee:	28 e2       	ldi	r18, 0x28	; 40
 3f0:	36 e0       	ldi	r19, 0x06	; 6
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	df 01       	movw	r26, r30
 3f8:	ac 01       	movw	r20, r24
 3fa:	1d 92       	st	X+, r1
 3fc:	41 50       	subi	r20, 0x01	; 1
 3fe:	50 40       	sbci	r21, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <OS_Init+0x28>
 402:	df 01       	movw	r26, r30
 404:	ae 5f       	subi	r26, 0xFE	; 254
 406:	be 4f       	sbci	r27, 0xFE	; 254
 408:	1c 92       	st	X, r1
 40a:	e8 5f       	subi	r30, 0xF8	; 248
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	e2 17       	cp	r30, r18
 410:	f3 07       	cpc	r31, r19
 412:	89 f7       	brne	.-30     	; 0x3f6 <OS_Init+0x24>
 414:	08 95       	ret

00000416 <OS_Start>:
 416:	cf 93       	push	r28
 418:	80 91 02 02 	lds	r24, 0x0202
 41c:	90 91 03 02 	lds	r25, 0x0203
 420:	89 2b       	or	r24, r25
 422:	09 f0       	breq	.+2      	; 0x426 <OS_Start+0x10>
 424:	45 c0       	rjmp	.+138    	; 0x4b0 <OS_Start+0x9a>
 426:	80 91 00 02 	lds	r24, 0x0200
 42a:	90 91 01 02 	lds	r25, 0x0201
 42e:	89 2b       	or	r24, r25
 430:	09 f4       	brne	.+2      	; 0x434 <OS_Start+0x1e>
 432:	3e c0       	rjmp	.+124    	; 0x4b0 <OS_Start+0x9a>
 434:	f8 94       	cli
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 03 02 	sts	0x0203, r25
 43e:	80 93 02 02 	sts	0x0202, r24
 442:	0d df       	rcall	.-486    	; 0x25e <Dispatch>
 444:	c1 e0       	ldi	r28, 0x01	; 1
 446:	e0 91 06 02 	lds	r30, 0x0206
 44a:	f0 91 07 02 	lds	r31, 0x0207
 44e:	df 01       	movw	r26, r30
 450:	a9 5f       	subi	r26, 0xF9	; 249
 452:	be 4f       	sbci	r27, 0xFE	; 254
 454:	1c 92       	st	X, r1
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	90 93 29 06 	sts	0x0629, r25
 45e:	80 93 28 06 	sts	0x0628, r24
 462:	53 de       	rcall	.-858    	; 0x10a <CSwitch>
 464:	e0 91 06 02 	lds	r30, 0x0206
 468:	f0 91 07 02 	lds	r31, 0x0207
 46c:	80 91 28 06 	lds	r24, 0x0628
 470:	90 91 29 06 	lds	r25, 0x0629
 474:	91 83       	std	Z+1, r25	; 0x01
 476:	80 83       	st	Z, r24
 478:	df 01       	movw	r26, r30
 47a:	a9 5f       	subi	r26, 0xF9	; 249
 47c:	be 4f       	sbci	r27, 0xFE	; 254
 47e:	8c 91       	ld	r24, X
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	31 f0       	breq	.+12     	; 0x490 <OS_Start+0x7a>
 484:	58 f0       	brcs	.+22     	; 0x49c <OS_Start+0x86>
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	49 f0       	breq	.+18     	; 0x49c <OS_Start+0x86>
 48a:	88 30       	cpi	r24, 0x08	; 8
 48c:	61 f0       	breq	.+24     	; 0x4a6 <OS_Start+0x90>
 48e:	db cf       	rjmp	.-74     	; 0x446 <OS_Start+0x30>
 490:	eb 5f       	subi	r30, 0xFB	; 251
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	60 df       	rcall	.-320    	; 0x35a <Kernel_Create_Task>
 49a:	d5 cf       	rjmp	.-86     	; 0x446 <OS_Start+0x30>
 49c:	ee 5f       	subi	r30, 0xFE	; 254
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	c0 83       	st	Z, r28
 4a2:	dd de       	rcall	.-582    	; 0x25e <Dispatch>
 4a4:	d0 cf       	rjmp	.-96     	; 0x446 <OS_Start+0x30>
 4a6:	ee 5f       	subi	r30, 0xFE	; 254
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	10 82       	st	Z, r1
 4ac:	d8 de       	rcall	.-592    	; 0x25e <Dispatch>
 4ae:	cb cf       	rjmp	.-106    	; 0x446 <OS_Start+0x30>
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <Task_Next>:
 4b4:	80 91 02 02 	lds	r24, 0x0202
 4b8:	90 91 03 02 	lds	r25, 0x0203
 4bc:	89 2b       	or	r24, r25
 4be:	51 f0       	breq	.+20     	; 0x4d4 <Task_Next+0x20>
 4c0:	f8 94       	cli
 4c2:	e0 91 06 02 	lds	r30, 0x0206
 4c6:	f0 91 07 02 	lds	r31, 0x0207
 4ca:	e9 5f       	subi	r30, 0xF9	; 249
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	80 83       	st	Z, r24
 4d2:	70 ce       	rjmp	.-800    	; 0x1b4 <Enter_Kernel>
 4d4:	08 95       	ret

000004d6 <__vector_21>:
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
 4fc:	f8 94       	cli
 4fe:	da df       	rcall	.-76     	; 0x4b4 <Task_Next>
 500:	78 94       	sei
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0b be       	out	0x3b, r0	; 59
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <main>:
  * will run forever.
  */
void main() 
{
	
   OS_Init();
 528:	54 df       	rcall	.-344    	; 0x3d2 <OS_Init>
   //Task_Create( Pong );
   //Task_Create( Ping );
  
   OS_Start();
 52a:	75 cf       	rjmp	.-278    	; 0x416 <OS_Start>
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
